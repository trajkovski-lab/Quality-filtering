import glob
import pandas as pd
import os


configfile: f"{os.path.dirname(workflow.snakefile)}/../config/default_config.yaml"


include: "functions.smk"


rule all:
    input:
        "results/GUNC_output.tsv",
        "results/BUSCO_output.tsv",


rule download_db:
    output:
        db=os.path.join(config["database_folder"], "gunc_db_{gunc_db_type}.dmnd"),
    conda:
        "env/gunc.yaml"
    log:
        "log/gunc/download_db_{gunc_db_type}.log",
    shell:
        "gunc download_db {resources.tmpdir} -db {wildcards.gunc_db_type} &> {log} ;"
        "mv {resources.tmpdir}/gunc_db_{wildcards.gunc_db_type}*.dmnd {output} 2>> {log}"


rule make_lists:
    input:
        config["genomes"],
    output:
        scatter.split("genome_list/{scatteritem}.txt"),
    script:
        "scripts/make_lists.py"


rule any2fasta:
    input:
        lists="genome_list/{scatteritem}.txt",
    output:
        directory(f"{config['intermediate_dir']}/results_any2fasta/{{scatteritem}}"),
    log:
        "log/any2fasta/{scatteritem}.log",
    group:
        "{scatteritem}"
    conda:
        "env/any2fasta.yaml"
    script:
        "scripts/any2fasta.py"


rule prodigal:
    input:
        fasta_dir=rules.any2fasta.output[0],
    output:
        directory(f"{config['intermediate_dir']}/results_prodigal/{{scatteritem}}/"),
    log:
        "log/prodigal/{scatteritem}.log",
    group:
        "{scatteritem}"
    params:
        parameters= "-q -p meta"
    conda:
        "env/gunc.yaml"
    script:
        "scripts/run_prodigal.py"



rule run_gunc:
    input:
        db=rules.download_db.output[0].format(**config),
        fasta_dir=rules.prodigal.output[0],
    output:
        "results/gunc_tables/{scatteritem}.tsv",
    conda:
        "env/gunc.yaml"
    log:
        "log/gunc/run_{scatteritem}.log",
    benchmark:
        "log/benchmark/gunc/{scatteritem}.tsv"
    group:
        "{scatteritem}"
    threads: 8
    params:
        working_dir=f"{config['intermediate_dir']}/results_gunc/{{scatteritem}}",
    shell:
        "mkdir -p {params.working_dir}/{wildcards.scatteritem}/ "
        "&& gunc run --threads {threads} --db_file {input.db} --input_dir {input.fasta_dir}/ "
        "--file_suffix .faa --gene_calls "
        "--out_dir {params.working_dir} &> {log} "
        "&& cp {params.working_dir}/*.tsv {output} &>> {log}"


rule concatenate_gunc:
    input:
        gather.split(rules.run_gunc.output),
    output:
        "results/GUNC_output.tsv",
    script:
        "scripts/concatenate_gunc.py"


rule run_busco:
    input:
        fasta_dir=rules.prodigal.output,
    output:
        "results/busco/{scatteritem}.tsv",
    conda:
        "env/busco.yaml"
    log:
        "log/busco/run_{scatteritem}.log",
    benchmark:
        "log/benchmark/busco/{scatteritem}.tsv"
    group:
        "{scatteritem}"
    params:
        working_dir=f"{config['intermediate_dir']}/results_busco/{{scatteritem}}/",
    threads: 4
    script:
        "scripts/busco.py"


rule concatenate_busco:
    input:
        gather.split(rules.run_busco.output),
    output:
        "results/BUSCO_output.tsv",
    log:
        "log/concatinate_busco.log",
    script:
        "scripts/concatenate_busco.py"
