import glob
import pandas as pd
import os


scattergather:
    split=2,


configfile: "../config/config.yaml"


rule all:
    input:
        "results/GUNC_output.tsv",
        "results/BUSCO_output.tsv",


rule download_db:
    output:
        db=f'{config["database_folder"]}/gunc_db_{{gunc_db_type}}.dmnd',
    conda:
        "envs/gunc.yaml"
    log:
        "log/gunc/download_db{gunc_db_type}.log",
    shell:
        "gunc download_db {resources.tmpdir} -db {wildcards.gunc_db_type} &> {log} ;"
        "mv {resources.tmpdir}/gunc_db_{wildcards.gunc_db_type}*.dmnd {output} 2>> {log}"


rule make_lists:
    input:
        config["genomes"],
    output:
        scatter.split("genome_list/{scatteritem}.txt"),
    script:
        "scripts/make_lists.py"


rule copy_MAGs:
    input:
        "genome_list/{scatteritem}.txt",
    output:
        directory("intermediate_dir/tmp_unzipped.{scatteritem}/"),
    group:
        "{scatteritem}"
    shell:
        "mkdir {output} && ( cat {input}; echo; echo {output} ) | xargs cp"


rule unzip:
    input:
        rules.copy_MAGs.output,
    output:
        temp(touch("intermediate_dir/tmp_unzipped.{scatteritem}.unzipped")),
    group:
        "{scatteritem}"
    shell:
        "cd {input} && gunzip -q *.gz"


rule prodigal:
    input:
        fasta_dir=rules.copy_MAGs.output,
        flag=rules.unzip.output,
    output:
        #faa = "intermediate_dir/results_prodigal_{scatteritem}/{sample}.faa",
        #gff = "intermediate_dir/results_prodigal_{scatteritem}/{sample}.gff",
        directory("intermediate_dir/results_prodigal_{scatteritem}/"),
    run:
        for i in input.fasta_dir:
            command_os = f"mkdir {output}"
            os.system(command_os)
            glob_argument = f"{i}/*.fasta"
            for path in glob.glob(glob_argument):
                sample_name = path.split("/")[-1].split(".")[0]
                command = f"prodigal -q -p meta -i {path} -d {output}/{sample_name}.fasta"
                os.system(command)


rule run_gunc:
    input:
        db="{database_folder}/gunc_db_{gunc_db_type}.dmnd".format(**config),
        fasta_dir="intermediate_dir/results_prodigal_{scatteritem}",
    output:
        directory("intermediate_dir/results_gunc_{scatteritem}/"),
    conda:
        "envs/gunc.yaml"
    params:
        format=config["format"].rstrip(".gz"),
    log:
        "log/gunc/run_{scatteritem}.log"
    benchmark:
        "log/benchmark/gunc/{scatteritem}.tsv"
    threads: 8
    shell:
        "mkdir {output} && gunc run --threads {threads} --db_file {input.db} --input_dir {input.fasta_dir}/ "
        "--file_suffix {params.format} "
        "--out_dir {output} &> {log}"


rule concatenate_gunc:
    input:
        gather.split(rules.run_gunc.output),
    output:
        "results/GUNC_output.tsv",
    script:
        "scripts/concatenate_gunc.py"


rule run_busco:
    input:
        fasta_dir="intermediate_dir/results_prodigal_{scatteritem}",
    output:
        "intermediate_dir/results_busco/{scatteritem}_batch_summary.txt",
    conda:
        "envs/busco.yaml"
    log:
        "log/busco/run_{scatteritem}.log",
    benchmark:
        "log/benchmark/busco/{scatteritem}.tsv"
    params:
        output_dir=".busco_temp_{scatteritem}",
        busco_parameters=config["busco_parameters"],
    shadow:
        "minimal"
    threads: 8
    resources:
        mem_mb=100000,
    shell:
        "busco -i {input.fasta_dir} {params.busco_parameters} -m genome "
        "-o {params.output_dir} -c {threads} &> {log} ;"
        "mv {params.output_dir}/batch_summary.txt {output} 2>> {log}"


rule concatenate_busco:
    input:
        gather.split(rules.run_busco.output),
    output:
        "results/BUSCO_output.tsv",
    script:
        "scripts/concatenate_busco.py"
