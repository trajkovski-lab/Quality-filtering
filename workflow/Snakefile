import glob
import pandas as pd
import os


scattergather:
    split=2,


configfile: "../config/config.yaml"


rule all:
    input:
        "results/GUNC_output.tsv",
        "results/BUSCO_output.tsv",


rule download_db:
    output:
        db=f'{config["database_folder"]}/gunc_db_{{gunc_db_type}}.dmnd',
    conda:
        "envs/gunc.yaml"
    log:
        "log/gunc/download_db{gunc_db_type}.log",
    shell:
        "gunc download_db {resources.tmpdir} -db {wildcards.gunc_db_type} &> {log} ;"
        "mv {resources.tmpdir}/gunc_db_{wildcards.gunc_db_type}*.dmnd {output} 2>> {log}"


rule make_lists:
    input:
        config["genomes"],
    output:
        scatter.split("genome_list/{scatteritem}.txt"),
    script:
        "scripts/make_lists.py"


rule copy_MAGs:
    input:
        "genome_list/{scatteritem}.txt",
    output:
        directory("intermediate_dir/tmp_unzipped/{scatteritem}/"),
    group:
        "{scatteritem}"
    shell:
        "mkdir {output} && ( cat {input}; echo; echo {output} ) | xargs cp"


rule unzip:
    input:
        rules.copy_MAGs.output,
    output:
        temp(touch("intermediate_dir/tmp_unzipped/{scatteritem}.unzipped")),
    group:
        "{scatteritem}"
    shell:
        "cd {input} && gunzip -q *.gz"


rule any2fasta:
    input:
        working_dir=rules.copy_MAGs.output,
        flag=rules.unzip.output,
    output:
        directory("intermediate_dir/results_any2fasta/{scatteritem}"),
    log:
        "log/any2fasta/{scatteritem}.log",
    conda:
        "envs/any2fasta.yaml"
    script:
        "scripts/any2fasta.py"


rule prodigal:
    input:
        fasta_dir=rules.any2fasta.output,
    output:
        directory("intermediate_dir/results_prodigal/{scatteritem}/"),
    log:
        "log/prodigal/{scatteritem}.log",
    run:
        for i in input.fasta_dir:
            command_os = f"mkdir {output}"
            os.system(command_os)
            glob_argument = f"{i}/*.fasta"
            for path in glob.glob(glob_argument):
                sample_name = "".join(path.split("/")[-1].split(".")[:-1])
                command = f"prodigal -q -p meta -i {path} -a {output}/{sample_name}.faa &> {log}"
                os.system(command)


rule run_gunc:
    input:
        db="{database_folder}/gunc_db_{gunc_db_type}.dmnd".format(**config),
        fasta_dir=rules.prodigal.output,
    output:
        directory("intermediate_dir/results_gunc/{scatteritem}/"),
    conda:
        "envs/gunc.yaml"
    log:
        "log/gunc/run_{scatteritem}.log",
    benchmark:
        "log/benchmark/gunc/{scatteritem}.tsv"
    threads: 8
    shell:
        "mkdir {output} && gunc run --threads {threads} --db_file {input.db} --input_dir {input.fasta_dir}/ "
        "--file_suffix .faa --gene_calls "
        "--out_dir {output} &> {log}"


rule concatenate_gunc:
    input:
        gather.split(rules.run_gunc.output),
    output:
        "results/GUNC_output.tsv",
    script:
        "scripts/concatenate_gunc.py"


rule run_busco:
    input:
        fasta_dir=rules.prodigal.output,
    output:
        directory("intermediate_dir/results_busco/{scatteritem}/"),
    conda:
        "envs/busco.yaml"
    log:
        "log/busco/run_{scatteritem}.log",
    benchmark:
        "log/benchmark/busco/{scatteritem}.tsv"
    params:
        output_dir=".busco_temp/{scatteritem}",
        busco_parameters=config["busco_parameters"],
    # shadow:
    #    "full"
    threads: 8
    # resources:
    #    mem_mb=100000,
    script:
        "scripts/busco.py"


rule concatenate_busco:
    input:
        gather.split(rules.run_busco.output),
    output:
        "results/BUSCO_output.tsv",
    log:
        "log/concatinate_busco.log",
    script:
        "scripts/concatenate_busco.py"
